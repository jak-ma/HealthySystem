"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batch2hd = batch2hd;
Object.defineProperty(exports, "checkCSSRule", {
  enumerable: true,
  get: function get() {
    return _cssRule.default;
  }
});
exports.parsePadding = parsePadding;
exports.px2hd = void 0;
var _util = require("@antv/util");
var _cssRule = _interopRequireDefault(require("./cssRule"));
// 默认设置50
var ONE_REM;
try {
  // xgraph下这段会抛错
  ONE_REM = parseInt(document.documentElement.style.fontSize, 10) || 50;
} catch (e) {
  ONE_REM = 50;
}
var SCALE = ONE_REM / 100;
/**
 * 像素转换
 * @param {Number} px - 750视觉稿像素
 * @return {Number} 屏幕上实际像素
 */
function defaultPx2hd(px) {
  if (!px) {
    return 0;
  }
  return Number((px * SCALE).toFixed(1));
}
function parsePadding(padding) {
  if ((0, _util.isNumber)(padding)) {
    return [padding, padding, padding, padding];
  }
  var top = padding[0];
  var right = (0, _util.isNumber)(padding[1]) ? padding[1] : padding[0];
  var bottom = (0, _util.isNumber)(padding[2]) ? padding[2] : top;
  var left = (0, _util.isNumber)(padding[3]) ? padding[3] : right;
  return [top, right, bottom, left];
}
function batch2hd(px2hd) {
  var _batchPx2hd = function batchPx2hd(value) {
    // 处理带px的数据
    if ((0, _util.isString)(value) && /^-?\d+(\.\d+)?px$/.test(value)) {
      var num = value.substr(0, value.length - 2);
      return px2hd(Number(num));
    }
    if ((0, _util.isArray)(value)) {
      return value.map(function (v) {
        return _batchPx2hd(v);
      });
    }
    if ((0, _util.isPlainObject)(value)) {
      var result = {};
      for (var key in value) {
        if (value.hasOwnProperty(key)) {
          var rst = _batchPx2hd(value[key]);
          if (!rst) {
            result[key] = rst;
            continue;
          }
          if (key === 'padding' || key === 'margin') {
            var paddingArray = parsePadding(rst);
            result[key] = paddingArray;
            result["".concat(key, "Top")] = paddingArray[0];
            result["".concat(key, "Right")] = paddingArray[1];
            result["".concat(key, "Bottom")] = paddingArray[2];
            result["".concat(key, "Left")] = paddingArray[3];
            continue;
          }
          result[key] = rst;
        }
      }
      return result;
    }
    // 默认直接返回
    return value;
  };
  return _batchPx2hd;
}
var px2hd = exports.px2hd = batch2hd(defaultPx2hd);