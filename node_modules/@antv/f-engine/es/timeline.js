import { __extends } from "tslib";
import Component from './component';
import Children from './children';
import { isNumber } from '@antv/util';
var Timeline = /** @class */function (_super) {
  __extends(Timeline, _super);
  function Timeline(props) {
    var _this = _super.call(this, props) || this;
    _this.next = function () {
      var _a = _this,
        state = _a.state,
        props = _a.props;
      var index = state.index,
        count = state.count,
        delay = state.delay,
        autoPlay = state.autoPlay;
      var loop = props.loop;
      if (autoPlay === false) {
        return;
      }
      var next = loop ? (index + 1) % count : index + 1;
      if (next >= count) {
        return;
      }
      _this.timer = setTimeout(function () {
        _this.setState({
          index: next
        });
      }, delay || 0);
    };
    var delay = props.delay,
      _a = props.start,
      start = _a === void 0 ? 0 : _a,
      children = props.children,
      autoPlay = props.autoPlay;
    var count = Children.toArray(children).length;
    _this.state = {
      delay: delay,
      count: count,
      index: start,
      autoPlay: autoPlay
    };
    return _this;
  }
  Timeline.prototype.didMount = function () {
    this.animator.on('end', this.next);
  };
  Timeline.prototype.willReceiveProps = function (nextProps) {
    var nextStart = nextProps.start,
      nextDelay = nextProps.delay,
      nextAutoPlay = nextProps.autoPlay;
    var _a = this.state,
      index = _a.index,
      delay = _a.delay,
      autoPlay = _a.autoPlay;
    if (isNumber(nextStart) || nextDelay !== delay || nextAutoPlay !== autoPlay) {
      // 更新时清除 setTimeout
      clearTimeout(this.timer);
      this.setState({
        delay: nextDelay,
        index: isNumber(nextStart) ? nextStart : index,
        autoPlay: nextAutoPlay
      });
    }
  };
  Timeline.prototype.didUnmount = function () {
    this.animator.off('end', this.next);
  };
  Timeline.prototype.render = function () {
    var _a = this,
      state = _a.state,
      props = _a.props;
    var children = props.children;
    var index = state.index;
    var childrenArray = Children.toArray(children);
    return childrenArray[index];
  };
  return Timeline;
}(Component);
export default Timeline;